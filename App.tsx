
import React, { useState, useCallback, useEffect } from 'react';
import { Header } from './components/Header';
import { TextAreaInput } from './components/TextAreaInput';
import { Button } from './components/Button';
import { CodeDisplay } from './components/CodeDisplay';
import { LoadingSpinner } from './components/LoadingSpinner';
import { Input } from './components/Input'; // New Input component
import { EyeIcon } from './components/icons/EyeIcon';
import { EyeSlashIcon } from './components/icons/EyeSlashIcon';
import { GitHubIcon } from './components/icons/GitHubIcon';
import { generateAppCode } from './services/geminiService';
import { getGitHubUser, createGitHubRepo, uploadToGitHub } from './services/githubService'; // New GitHub service
import { GEMINI_MODEL_NAME } from './constants';

const App: React.FC = () => {
  const [appDescription, setAppDescription] = useState<string>('');
  const [generatedCode, setGeneratedCode] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // GitHub related state
  const [githubToken, setGithubToken] = useState<string>('');
  const [showToken, setShowToken] = useState<boolean>(false);
  const [repoName, setRepoName] = useState<string>('');
  const [isUploadingToGitHub, setIsUploadingToGitHub] = useState<boolean>(false);
  const [gitHubError, setGitHubError] = useState<string | null>(null);
  const [gitHubSuccessMessage, setGitHubSuccessMessage] = useState<string | null>(null);
  const [githubUsername, setGithubUsername] = useState<string>('');


  const handleGenerateCode = useCallback(async () => {
    if (!appDescription.trim()) {
      setError('Please enter an application description.');
      return;
    }
    setIsLoading(true);
    setError(null);
    setGeneratedCode('');
    setGitHubError(null);
    setGitHubSuccessMessage(null);

    try {
      const code = await generateAppCode(appDescription);
      setGeneratedCode(code);
    } catch (err) {
      console.error('Error generating code:', err);
      setError(err instanceof Error ? err.message : 'An unknown error occurred. Check console for details.');
    } finally {
      setIsLoading(false);
    }
  }, [appDescription]);

  useEffect(() => {
    // Fetch GitHub username if token is provided
    const fetchUser = async () => {
      if (githubToken) {
        try {
          const user = await getGitHubUser(githubToken);
          setGithubUsername(user.login);
          setGitHubError(null);
        } catch (err) {
          console.error("Error fetching GitHub user:", err);
          setGithubUsername('');
          // Don't show an error here immediately, wait for upload attempt
          // setGitHubError(err instanceof Error ? err.message : 'Failed to fetch GitHub user.');
        }
      } else {
        setGithubUsername('');
      }
    };
    fetchUser();
  }, [githubToken]);

  const handleUploadToGitHub = useCallback(async () => {
    if (!generatedCode || !githubToken.trim() || !repoName.trim()) {
      setGitHubError('Generated code, GitHub token, and repository name are required.');
      return;
    }
    if (!githubUsername) {
        setGitHubError('Could not verify GitHub token or fetch username. Please check your token and try again.');
        // Attempt to fetch user again, in case of transient issues
        try {
            const user = await getGitHubUser(githubToken);
            setGithubUsername(user.login);
            // If successful, the user can click again
            setGitHubError('GitHub user verified. Please try uploading again.');
        } catch (fetchErr) {
             setGitHubError(fetchErr instanceof Error ? `Token verification failed: ${fetchErr.message}` : 'Token verification failed.');
        }
        return;
    }

    setIsUploadingToGitHub(true);
    setGitHubError(null);
    setGitHubSuccessMessage(null);

    try {
      const repoDescription = `Repository for app: ${appDescription.substring(0, 100)}${appDescription.length > 100 ? '...' : ''}. Created by AI App Coder.`;
      
      await createGitHubRepo(githubToken, repoName, repoDescription);
      
      await uploadToGitHub(
        githubToken,
        githubUsername,
        repoName,
        'App.tsx',
        generatedCode,
        'Initial commit: Add App.tsx generated by AI App Coder'
      );
      
      const repoUrl = `https://github.com/${githubUsername}/${repoName}`;
      setGitHubSuccessMessage(`Successfully created repository and uploaded App.tsx! View it here: ${repoUrl}`);

    } catch (err) {
      console.error('Error uploading to GitHub:', err);
      setGitHubError(err instanceof Error ? err.message : 'An unknown error occurred during GitHub operation.');
    } finally {
      setIsUploadingToGitHub(false);
    }
  }, [generatedCode, githubToken, repoName, githubUsername, appDescription]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 text-slate-100 flex flex-col items-center p-4 sm:p-6 md:p-8">
      <Header />
      <main className="w-full max-w-4xl mt-8 space-y-8">
        <section className="bg-slate-800/50 backdrop-blur-md shadow-2xl rounded-xl p-6 md:p-8">
          <h2 className="text-2xl font-semibold text-sky-400 mb-6">1. Describe Your App</h2>
          <TextAreaInput
            value={appDescription}
            onChange={(e) => setAppDescription(e.target.value)}
            placeholder="e.g., A simple counter app with increment, decrement, and reset buttons, styled with Tailwind CSS."
            rows={6}
            disabled={isLoading || isUploadingToGitHub}
            aria-label="Application Description"
          />
          <div className="mt-6 flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0 sm:space-x-4">
            <p className="text-xs text-slate-400">
              Using model: <span className="font-medium text-sky-500">{GEMINI_MODEL_NAME}</span>
            </p>
            <Button 
              onClick={handleGenerateCode} 
              isLoading={isLoading} 
              disabled={isLoading || isUploadingToGitHub || !appDescription.trim()}
              aria-label="Generate Application Code"
            >
              {isLoading ? 'Generating Code...' : 'Generate App Code'}
            </Button>
          </div>
        </section>

        {isLoading && (
          <div className="flex justify-center items-center py-10" role="status" aria-live="polite">
            <LoadingSpinner />
            <p className="ml-4 text-lg text-sky-400">AI is thinking...</p>
          </div>
        )}

        {error && (
          <section className="bg-red-700/30 backdrop-blur-md shadow-lg rounded-xl p-6" role="alert">
            <h3 className="text-xl font-semibold text-red-400 mb-2">Error Generating Code</h3>
            <p className="text-red-300 whitespace-pre-wrap">{error}</p>
          </section>
        )}

        {generatedCode && !isLoading && (
          <section className="bg-slate-800/50 backdrop-blur-md shadow-2xl rounded-xl">
             <div className="px-6 md:px-8 pt-6 pb-2">
                <h3 className="text-2xl font-semibold text-emerald-400 mb-1">2. Generated Code</h3>
                <p className="text-sm text-slate-400 mb-4">Review the generated TSX code below. You can copy it or proceed to upload to GitHub.</p>
             </div>
            <CodeDisplay code={generatedCode} />
          </section>
        )}

        {generatedCode && !isLoading && (
          <section className="bg-slate-800/50 backdrop-blur-md shadow-2xl rounded-xl p-6 md:p-8 mt-8">
            <h2 className="text-2xl font-semibold text-purple-400 mb-6">3. Deploy to GitHub</h2>
            <div className="space-y-6">
              <div>
                <label htmlFor="githubToken" className="block text-sm font-medium text-slate-300 mb-1">
                  GitHub Personal Access Token (PAT)
                </label>
                 <p className="text-xs text-slate-400 mb-2">
                  Requires <code className="bg-slate-700 px-1 rounded">public_repo</code> scope. {' '}
                  <a 
                    href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic" 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="text-sky-400 hover:text-sky-300 underline"
                  >
                    How to create a PAT
                  </a>.
                </p>
                <div className="relative">
                  <Input
                    id="githubToken"
                    type={showToken ? 'text' : 'password'}
                    value={githubToken}
                    onChange={(e) => setGithubToken(e.target.value)}
                    placeholder="Enter your GitHub PAT"
                    disabled={isUploadingToGitHub}
                    className="pr-10"
                    aria-label="GitHub Personal Access Token"
                  />
                  <button
                    type="button"
                    onClick={() => setShowToken(!showToken)}
                    className="absolute inset-y-0 right-0 px-3 flex items-center text-slate-400 hover:text-sky-400"
                    aria-label={showToken ? "Hide token" : "Show token"}
                  >
                    {showToken ? <EyeSlashIcon className="w-5 h-5" /> : <EyeIcon className="w-5 h-5" />}
                  </button>
                </div>
              </div>

              <div>
                <label htmlFor="repoName" className="block text-sm font-medium text-slate-300 mb-1">
                  New Repository Name
                </label>
                <Input
                  id="repoName"
                  type="text"
                  value={repoName}
                  onChange={(e) => setRepoName(e.target.value.replace(/\s+/g, '-'))} // Replace spaces with hyphens
                  placeholder="e.g., my-awesome-react-app"
                  disabled={isUploadingToGitHub}
                  aria-label="New GitHub Repository Name"
                />
                 {githubUsername && repoName && (
                  <p className="text-xs text-slate-400 mt-1">
                    Will be created as: <code className="bg-slate-700 px-1 rounded">https://github.com/{githubUsername}/{repoName}</code>
                  </p>
                )}
              </div>
              
              <Button
                onClick={handleUploadToGitHub}
                isLoading={isUploadingToGitHub}
                disabled={isUploadingToGitHub || !generatedCode || !githubToken.trim() || !repoName.trim()}
                className="w-full sm:w-auto bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600"
                aria-label="Create GitHub Repository and Upload App.tsx"
              >
                <GitHubIcon className="w-5 h-5 mr-2" />
                {isUploadingToGitHub ? 'Deploying to GitHub...' : 'Create Repo & Upload App.tsx'}
              </Button>
            </div>

            {isUploadingToGitHub && (
              <div className="flex items-center mt-6 text-purple-400" role="status" aria-live="polite">
                <LoadingSpinner color="text-purple-400" />
                <p className="ml-3">Communicating with GitHub...</p>
              </div>
            )}

            {gitHubError && (
              <div className="mt-6 bg-red-700/30 backdrop-blur-md shadow-lg rounded-lg p-4 text-red-300" role="alert">
                <h4 className="font-semibold text-red-400">GitHub Error:</h4>
                <p className="whitespace-pre-wrap">{gitHubError}</p>
              </div>
            )}

            {gitHubSuccessMessage && (
              <div className="mt-6 bg-emerald-700/30 backdrop-blur-md shadow-lg rounded-lg p-4 text-emerald-300" role="alert">
                <h4 className="font-semibold text-emerald-400">Success!</h4>
                <p className="whitespace-pre-wrap">
                  {gitHubSuccessMessage.startsWith('Successfully created repository') ? (
                    <>
                      {gitHubSuccessMessage.split(' View it here: ')[0]} View it here:{' '}
                      <a 
                        href={gitHubSuccessMessage.split(' View it here: ')[1]} 
                        target="_blank" 
                        rel="noopener noreferrer" 
                        className="font-medium underline hover:text-emerald-200"
                      >
                        {gitHubSuccessMessage.split(' View it here: ')[1]}
                      </a>
                    </>
                  ) : gitHubSuccessMessage}
                </p>
              </div>
            )}
          </section>
        )}
      </main>
      <footer className="w-full max-w-4xl mt-12 text-center text-slate-500 text-sm pb-8">
        <p>&copy; {new Date().getFullYear()} AI App Coder. Powered by Gemini API & GitHub.</p>
        <p>Ensure your API_KEY environment variable is set for AI features. GitHub PAT is handled locally.</p>
      </footer>
    </div>
  );
};

export default App;
